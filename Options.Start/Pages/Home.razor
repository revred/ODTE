@page "/"
@using Options.Start.Services
@inject IOptimizationService OptimizationService
@inject ITradingService TradingService
@inject IRiskService RiskService
@inject IDataService DataService

<PageTitle>ODTE Dashboard</PageTitle>

<div class="dashboard">
    <div class="odte-card">
        <div class="odte-header">
            <h3>üéØ ODTE Trading Dashboard</h3>
            <small>Zero Days to Expiry Options Strategy</small>
        </div>
        <div class="card-body p-4">
            <div class="row">
                <!-- System Overview -->
                <div class="col-md-8">
                    <h5>üìä System Overview</h5>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="metric-card">
                                <div class="metric-value @GetPnLClass(_tradingStatus?.TotalPnL ?? 0)">
                                    @($"${_tradingStatus?.TotalPnL ?? 0:N2}")
                                </div>
                                <div class="metric-label">Total P&L</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="metric-card">
                                <div class="metric-value">@(_tradingStatus?.ActivePositions ?? 0)</div>
                                <div class="metric-label">Active Positions</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="metric-card">
                                <div class="metric-value">@_strategyVersions?.Count ?? 0</div>
                                <div class="metric-label">Strategy Versions</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Risk Status -->
                <div class="col-md-4">
                    <h5>üõ°Ô∏è Risk Management</h5>
                    @if (_riskStatus != null)
                    {
                        <div class="risk-panel">
                            <div class="risk-level">
                                <strong>Risk Level: @_riskStatus.CurrentLevel</strong>
                            </div>
                            <div class="risk-limit">
                                Daily Limit: $@(_riskStatus.CurrentLimit.ToString("N0"))
                            </div>
                            <div class="progress mt-2">
                                <div class="progress-bar @GetRiskProgressClass(_riskStatus)" 
                                     style="width: @GetRiskProgressPercent(_riskStatus)%">
                                    $@(_riskStatus.DailyLossUsed.ToString("N0")) used
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Strategy Performance -->
    <div class="odte-card">
        <div class="odte-header">
            <h4>üìà Strategy Performance</h4>
            <small>Latest optimization results from genetic algorithm</small>
        </div>
        <div class="card-body p-4">
            @if (_strategyVersions?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Version</th>
                                <th>Created</th>
                                <th>Trades</th>
                                <th>Win Rate</th>
                                <th>Total P&L</th>
                                <th>Max DD</th>
                                <th>Sharpe</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var strategy in _strategyVersions)
                            {
                                <tr>
                                    <td>
                                        <span class="strategy-version-badge version-@(strategy.Id.Replace(".", "-"))">
                                            @strategy.Id
                                        </span>
                                    </td>
                                    <td>@strategy.CreatedAt.ToString("MMM dd")</td>
                                    <td>@strategy.Performance.TotalTrades</td>
                                    <td>@((strategy.Performance.WinRate * 100).ToString("F1"))%</td>
                                    <td class="@GetPnLClass(strategy.Performance.TotalPnL)">
                                        $@(strategy.Performance.TotalPnL.ToString("N2"))
                                    </td>
                                    <td class="loss">$@(strategy.Performance.MaxDrawdown.ToString("N2"))</td>
                                    <td class="@GetSharpeClass(strategy.Performance.SharpeRatio)">
                                        @(strategy.Performance.SharpeRatio.ToString("F2"))
                                    </td>
                                    <td>
                                        @if (strategy.Id == "v1.2")
                                        {
                                            <span class="badge bg-primary">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Archived</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center p-4">
                    <p>Loading strategy performance data...</p>
                </div>
            }
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="row">
        <div class="col-md-6">
            <div class="odte-card">
                <div class="odte-header">
                    <h5>üìä Data Summary</h5>
                </div>
                <div class="card-body p-3">
                    @if (_dataSummary != null)
                    {
                        <div class="data-stats">
                            <div class="stat-item">
                                <strong>@_dataSummary.TotalFiles</strong> data files
                            </div>
                            <div class="stat-item">
                                <strong>@(_dataSummary.TotalSizeMB.ToString("N1")) MB</strong> total size
                            </div>
                            <div class="stat-item">
                                <strong>5 years</strong> historical data
                            </div>
                            <div class="stat-item">
                                <strong>1,294</strong> trading days
                            </div>
                            <small class="text-muted">
                                Last updated: @_dataSummary.LastUpdated.ToString("MMM dd, HH:mm")
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="odte-card">
                <div class="odte-header">
                    <h5>‚ö° Quick Actions</h5>
                </div>
                <div class="card-body p-3">
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" onclick="location.href='/optimization'">
                            üß¨ Run Optimization
                        </button>
                        <button class="btn btn-secondary" onclick="location.href='/backtest'">
                            ‚è™ Run Backtest
                        </button>
                        <button class="btn btn-info" onclick="location.href='/strategies'">
                            üìã View All Strategies
                        </button>
                        <button class="btn btn-warning" onclick="location.href='/risk'">
                            üõ°Ô∏è Risk Management
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<StrategyVersion>? _strategyVersions;
    private TradingStatus? _tradingStatus;
    private RiskStatus? _riskStatus;
    private DataSummary? _dataSummary;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load all data in parallel
            var strategiesTask = OptimizationService.GetStrategyVersionsAsync();
            var tradingTask = TradingService.GetStatusAsync();
            var riskTask = RiskService.GetRiskStatusAsync();
            var dataTask = DataService.GetDataSummaryAsync();

            await Task.WhenAll(strategiesTask, tradingTask, riskTask, dataTask);

            _strategyVersions = await strategiesTask;
            _tradingStatus = await tradingTask;
            _riskStatus = await riskTask;
            _dataSummary = await dataTask;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
    }

    private string GetPnLClass(double pnl) => pnl switch
    {
        > 0 => "profit",
        < 0 => "loss", 
        _ => "neutral"
    };

    private string GetSharpeClass(double sharpe) => sharpe switch
    {
        > 0 => "profit",
        < -0.5 => "loss",
        _ => "neutral"
    };

    private string GetRiskProgressClass(RiskStatus risk) => risk.CurrentLevel switch
    {
        0 => "bg-success",
        1 => "bg-warning",
        2 => "bg-danger",
        _ => "bg-dark"
    };

    private double GetRiskProgressPercent(RiskStatus risk) => 
        Math.Min((risk.DailyLossUsed / risk.CurrentLimit) * 100, 100);
}